<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Cronómetros Test Rápido</title>
  <style>
    body {
      font-family: sans-serif;
      padding: 10px;
      background-color: #f0f0f0;
    }
    .timer {
      background-color: white;
      border: 2px solid #ccc;
      padding: 10px;
      margin-bottom: 10px;
      border-radius: 10px;
      display: flex;
      flex-direction: column;
      gap: 10px;
    }
    .id-controls {
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 10px;
    }
    .id-controls button {
      font-size: 18px;
      padding: 5px 10px;
    }
    .time-display {
      font-size: 24px;
      font-weight: bold;
      text-align: center;
    }
    .info {
      text-align: center;
      font-size: 14px;
    }
    .delete-btn {
      background-color: #f44336;
      color: white;
      border: none;
      padding: 5px 10px;
      border-radius: 6px;
      cursor: pointer;
      align-self: center;
    }
  </style>
</head>
<body>

  <h2>Cronómetros para Test Rápido</h2>
  <button onclick="addTimer()">Agregar cronómetro</button>
  <div id="timers"></div>

  <script>
    let timers = [];

    function saveTimers() {
      localStorage.setItem("timersData", JSON.stringify(timers.map(t => ({
        id: t.id,
        startTime: t.startTime,
        createdAt: t.createdAt
      }))));
    }

    function loadTimers() {
      const saved = JSON.parse(localStorage.getItem("timersData") || "[]");
      saved.forEach(data => {
        addTimer(data.id, data.startTime, data.createdAt);
      });
    }

    function formatTime(ts) {
      const d = new Date(ts);
      return d.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
    }

    function addTimer(id = null, startTime = null, createdAt = null) {
      const container = document.getElementById("timers");
      const timerDiv = document.createElement("div");
      timerDiv.className = "timer";

      if (!id) id = timers.length ? Math.max(...timers.map(t => t.id)) + 1 : 1;
      const start = startTime ? new Date(startTime) : new Date();
      const hi = formatTime(start);
      const hf = formatTime(start.getTime() + 20 * 60000);
      const info = { id, startTime: start.toISOString(), createdAt: createdAt || Date.now() };

      const idControls = document.createElement("div");
      idControls.className = "id-controls";

      const minusBtn = document.createElement("button");
      minusBtn.textContent = "-";
      const idLabel = document.createElement("span");
      idLabel.textContent = id;
      const plusBtn = document.createElement("button");
      plusBtn.textContent = "+";

      minusBtn.onclick = () => {
        info.id = Math.max(1, info.id - 1);
        idLabel.textContent = info.id;
        saveTimers();
      };

      plusBtn.onclick = () => {
        info.id += 1;
        idLabel.textContent = info.id;
        saveTimers();
      };

      idControls.appendChild(minusBtn);
      idControls.appendChild(idLabel);
      idControls.appendChild(plusBtn);

      const timeDisplay = document.createElement("div");
      timeDisplay.className = "time-display";

      const infoDisplay = document.createElement("div");
      infoDisplay.className = "info";
      infoDisplay.innerHTML = `HI: ${hi} &nbsp;&nbsp; HF: ${hf}`;

      const deleteBtn = document.createElement("button");
      deleteBtn.className = "delete-btn";
      deleteBtn.textContent = "Eliminar";
      deleteBtn.onclick = () => {
        clearInterval(interval);
        timers = timers.filter(t => t.createdAt !== info.createdAt);
        saveTimers();
        container.removeChild(timerDiv);
      };

      timerDiv.appendChild(idControls);
      timerDiv.appendChild(timeDisplay);
      timerDiv.appendChild(infoDisplay);
      timerDiv.appendChild(deleteBtn);
      container.appendChild(timerDiv);

      let interval = setInterval(() => {
        const elapsed = Math.floor((Date.now() - new Date(info.startTime)) / 1000);
        const minutes = Math.floor(elapsed / 60);
        const seconds = elapsed % 60;
        timeDisplay.textContent = `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;

        if (elapsed >= 20 * 60) {
          timerDiv.style.backgroundColor = "#ffcdd2"; // rojo
        } else if (elapsed >= 15 * 60) {
          timerDiv.style.backgroundColor = "#c8e6c9"; // verde
        }
      }, 1000);

      timers.push(info);
      saveTimers();
    }

    window.onload = loadTimers;
  </script>

</body>
</html>
